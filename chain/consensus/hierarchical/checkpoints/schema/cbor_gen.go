// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package schema

import (
	"fmt"
	"io"
	"math"
	"sort"

	abi "github.com/filecoin-project/go-state-types/abi"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufChildCheck = []byte{130}

func (t *ChildCheck) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufChildCheck); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Source (string) (string)
	if len(t.Source) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Source was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Source))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Source)); err != nil {
		return err
	}

	// t.Checks ([]cid.Cid) (slice)
	if len(t.Checks) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Checks was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Checks))); err != nil {
		return err
	}
	for _, v := range t.Checks {
		if err := cbg.WriteCidBuf(scratch, w, v); err != nil {
			return xerrors.Errorf("failed writing cid field t.Checks: %w", err)
		}
	}
	return nil
}

func (t *ChildCheck) UnmarshalCBOR(r io.Reader) error {
	*t = ChildCheck{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Source (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Source = string(sval)
	}
	// t.Checks ([]cid.Cid) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Checks: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Checks = make([]cid.Cid, extra)
	}

	for i := 0; i < int(extra); i++ {

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("reading cid field t.Checks failed: %w", err)
		}
		t.Checks[i] = c
	}

	return nil
}

var lengthBufCrossMsgMeta = []byte{132}

func (t *CrossMsgMeta) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCrossMsgMeta); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.From (string) (string)
	if len(t.From) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.From was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.From))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.From)); err != nil {
		return err
	}

	// t.To (string) (string)
	if len(t.To) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.To was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.To))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.To)); err != nil {
		return err
	}

	// t.MsgsCid (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.MsgsCid); err != nil {
		return xerrors.Errorf("failed to write cid field t.MsgsCid: %w", err)
	}

	// t.Nonce (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return err
	}

	return nil
}

func (t *CrossMsgMeta) UnmarshalCBOR(r io.Reader) error {
	*t = CrossMsgMeta{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.From (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.From = string(sval)
	}
	// t.To (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.To = string(sval)
	}
	// t.MsgsCid (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.MsgsCid: %w", err)
		}

		t.MsgsCid = c

	}
	// t.Nonce (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Nonce = uint64(extra)

	}
	return nil
}

var lengthBufCheckData = []byte{134}

func (t *CheckData) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCheckData); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Source (string) (string)
	if len(t.Source) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Source was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Source))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Source)); err != nil {
		return err
	}

	// t.TipSet ([]uint8) (slice)
	if len(t.TipSet) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.TipSet was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.TipSet))); err != nil {
		return err
	}

	if _, err := w.Write(t.TipSet[:]); err != nil {
		return err
	}

	// t.Epoch (abi.ChainEpoch) (int64)
	if t.Epoch >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Epoch)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Epoch-1)); err != nil {
			return err
		}
	}

	// t.PrevCheckCid (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.PrevCheckCid); err != nil {
		return xerrors.Errorf("failed to write cid field t.PrevCheckCid: %w", err)
	}

	// t.Childs ([]schema.ChildCheck) (slice)
	if len(t.Childs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Childs was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Childs))); err != nil {
		return err
	}
	for _, v := range t.Childs {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.CrossMsgs ([]schema.CrossMsgMeta) (slice)
	if len(t.CrossMsgs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.CrossMsgs was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.CrossMsgs))); err != nil {
		return err
	}
	for _, v := range t.CrossMsgs {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *CheckData) UnmarshalCBOR(r io.Reader) error {
	*t = CheckData{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 6 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Source (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Source = string(sval)
	}
	// t.TipSet ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.TipSet: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.TipSet = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.TipSet[:]); err != nil {
		return err
	}
	// t.Epoch (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Epoch = abi.ChainEpoch(extraI)
	}
	// t.PrevCheckCid (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.PrevCheckCid: %w", err)
		}

		t.PrevCheckCid = c

	}
	// t.Childs ([]schema.ChildCheck) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Childs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Childs = make([]ChildCheck, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v ChildCheck
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Childs[i] = v
	}

	// t.CrossMsgs ([]schema.CrossMsgMeta) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.CrossMsgs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.CrossMsgs = make([]CrossMsgMeta, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v CrossMsgMeta
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.CrossMsgs[i] = v
	}

	return nil
}

var lengthBufCheckpoint = []byte{130}

func (t *Checkpoint) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCheckpoint); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Data (schema.CheckData) (struct)
	if err := t.Data.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Signature ([]uint8) (slice)
	if len(t.Signature) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Signature was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Signature))); err != nil {
		return err
	}

	if _, err := w.Write(t.Signature[:]); err != nil {
		return err
	}
	return nil
}

func (t *Checkpoint) UnmarshalCBOR(r io.Reader) error {
	*t = Checkpoint{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Data (schema.CheckData) (struct)

	{

		if err := t.Data.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Data: %w", err)
		}

	}
	// t.Signature ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Signature: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Signature = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Signature[:]); err != nil {
		return err
	}
	return nil
}
